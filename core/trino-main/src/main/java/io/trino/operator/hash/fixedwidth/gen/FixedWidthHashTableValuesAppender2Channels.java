/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.trino.operator.hash.fixedwidth.gen;

import io.trino.operator.hash.AbstractHashTableValuesAppender;
import io.trino.operator.hash.ColumnValueExtractor;
import io.trino.operator.hash.HashTableData;
import io.trino.operator.hash.fastbb.FastByteBuffer;
import io.trino.operator.hash.fixedwidth.FixedWidthEntryStructure;
import io.trino.operator.hash.fixedwidth.FixedWidthGroupByHashTableEntries;
import io.trino.spi.PageBuilder;
import io.trino.spi.block.BlockBuilder;

import static com.google.common.base.Preconditions.checkArgument;
import static io.trino.spi.type.BigintType.BIGINT;
import static java.util.Objects.requireNonNull;

/**
 * This class has been generated by the FixedWidthHashTableValuesAppenderGenerator class.
 * The generation is a one-time event and is not repeated during build
 */
public final class FixedWidthHashTableValuesAppender2Channels
        extends AbstractHashTableValuesAppender
{
    private final ColumnValueExtractor columnValueExtractor0;

    private final ColumnValueExtractor columnValueExtractor1;

    private final int value1Offset;

    public FixedWidthHashTableValuesAppender2Channels(FixedWidthEntryStructure structure)
    {
        requireNonNull(structure, "structure is null");
        checkArgument(structure.getHashChannelsCount() == 2);
        columnValueExtractor0 = structure.getColumnValueExtractors()[0];
        columnValueExtractor1 = structure.getColumnValueExtractors()[1];
        value1Offset = structure.getValuesOffsets()[1];
    }

    @Override
    protected void appendValuesTo(HashTableData data, int batchSize, int[] groupIdBatch,
            int[] positionsBatch, int[] valuesOffsetBatch, boolean[] isNullBatch,
            PageBuilder pageBuilder, int outputChannelOffset, boolean outputHash)
    {
        FixedWidthGroupByHashTableEntries entries = (FixedWidthGroupByHashTableEntries) data.entries();
        for (int i = 0; i < batchSize; i++) {
            positionsBatch[i] = data.getPosition(groupIdBatch[i]);
        }
        for (int i = 0; i < batchSize; i++) {
            valuesOffsetBatch[i] = entries.getValuesOffset(positionsBatch[i]);
        }
        FastByteBuffer buffer = entries.getBuffer();
        appendValue0(pageBuilder, outputChannelOffset, entries, batchSize, positionsBatch, valuesOffsetBatch, isNullBatch, buffer);
        appendValue1(pageBuilder, outputChannelOffset, entries, batchSize, positionsBatch, valuesOffsetBatch, isNullBatch, buffer);
        if (outputHash) {
            BlockBuilder hashBlockBuilder = pageBuilder.getBlockBuilder(outputChannelOffset + 2);
            for (int i = 0; i < batchSize; i++) {
                BIGINT.writeLong(hashBlockBuilder, entries.getHash(positionsBatch[i]));
            }
        }
    }

    private void appendValue0(PageBuilder pageBuilder, int outputChannelOffset,
            FixedWidthGroupByHashTableEntries entries, int batchSize, int[] positionsBatch,
            int[] valuesOffsetBatch, boolean[] isNullBatch, FastByteBuffer buffer)
    {
        for (int i = 0; i < batchSize; i++) {
            isNullBatch[i] = entries.isNull(positionsBatch[i], 0) == 1;
        }
        BlockBuilder blockBuilder0 = pageBuilder.getBlockBuilder(outputChannelOffset);
        for (int i = 0; i < batchSize; i++) {
            if (isNullBatch[i]) {
                blockBuilder0.appendNull();
            }
            else {
                columnValueExtractor0.appendValue(buffer, valuesOffsetBatch[i], blockBuilder0);
            }
        }
    }

    private void appendValue1(PageBuilder pageBuilder, int outputChannelOffset,
            FixedWidthGroupByHashTableEntries entries, int batchSize, int[] positionsBatch,
            int[] valuesOffsetBatch, boolean[] isNullBatch, FastByteBuffer buffer)
    {
        for (int i = 0; i < batchSize; i++) {
            isNullBatch[i] = entries.isNull(positionsBatch[i], 1) == 1;
        }
        BlockBuilder blockBuilder1 = pageBuilder.getBlockBuilder(outputChannelOffset + 1);
        for (int i = 0; i < batchSize; i++) {
            if (isNullBatch[i]) {
                blockBuilder1.appendNull();
            }
            else {
                columnValueExtractor1.appendValue(buffer, valuesOffsetBatch[i] + value1Offset, blockBuilder1);
            }
        }
    }

    @Override
    public void appendValuesTo(HashTableData data, int groupId, PageBuilder pageBuilder,
            int outputChannelOffset, boolean outputHash)
    {
        FixedWidthGroupByHashTableEntries entries = (FixedWidthGroupByHashTableEntries) data.entries();
        int position = data.getPosition(groupId);
        FastByteBuffer buffer = entries.getBuffer();
        int valuesOffset = entries.getValuesOffset(position);
        appendValue0(pageBuilder, outputChannelOffset, entries, position, valuesOffset, buffer);
        appendValue1(pageBuilder, outputChannelOffset, entries, position, valuesOffset, buffer);
        if (outputHash) {
            BlockBuilder hashBlockBuilder = pageBuilder.getBlockBuilder(outputChannelOffset + 2);
            BIGINT.writeLong(hashBlockBuilder, entries.getHash(position));
        }
    }

    private void appendValue0(PageBuilder pageBuilder, int outputChannelOffset,
            FixedWidthGroupByHashTableEntries entries, int position, int valuesOffset,
            FastByteBuffer buffer)
    {
        BlockBuilder blockBuilder0 = pageBuilder.getBlockBuilder(outputChannelOffset);
        if (entries.isNull(position, 0) == 1) {
            blockBuilder0.appendNull();
        }
        else {
            columnValueExtractor0.appendValue(buffer, valuesOffset, blockBuilder0);
        }
    }

    private void appendValue1(PageBuilder pageBuilder, int outputChannelOffset,
            FixedWidthGroupByHashTableEntries entries, int position, int valuesOffset,
            FastByteBuffer buffer)
    {
        BlockBuilder blockBuilder1 = pageBuilder.getBlockBuilder(outputChannelOffset + 1);
        if (entries.isNull(position, 1) == 1) {
            blockBuilder1.appendNull();
        }
        else {
            columnValueExtractor1.appendValue(buffer, valuesOffset + value1Offset, blockBuilder1);
        }
    }
}
